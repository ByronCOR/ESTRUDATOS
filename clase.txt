SEMANA 1
esquema intencion
relación, tabla, clase de entidades
estas relaciones están formadas por conjunto de propiedades también llamada atributos columnas, campos (orden no importa)
en el modelo relacional sele puede llamar tuplas filas, registros entidades
clave primaria ,PK, clave principal se asegura que cada fila es unica(solo una y pueden ser simple o compuesta) NO PUEDESER NULO 
clave foránea, FK, foreign key, establece una relación entre la tablas(puede existir muchas en una misma tabla)si puede set nulo o pertener a un padre
el dominio define los valores permitidos para cada atributo(puede  tener restricciones

CREATE TABLE Cliente (
    Id_cliente VARCHAR(11) PRIMARY KEY, 
    Nombre_cliente VARCHAR(50) NOT NULL, 
    Direccion_cliente VARCHAR(50), 
    Telefono_cliente VARCHAR(40)
);

INSERT INTO Cliente (Id_cliente, Nombre_cliente, Direccion_cliente, Telefono_cliente)
VALUES ('001', 'Daniel', 'Calle1', '0997856435'),
('002', 'Maria', 'Calle2', '0991535307'),
('003', 'Fernanda', 'Calle3', '0995684935'),
('004', 'Juan', 'Calle4', '0998143658'),
('005', 'Josselyn', 'Calle5', '0993857496');
SELECT * FROM Cliente;

CREATE TABLE Producto (
Id_producto VARCHAR(11) PRIMARY KEY,
Nombre_producto VARCHAR(50) NOT NULL,
Categoria VARCHAR(50) NOT NULL,
Cantidad_producto INT,
Precio_unidad DECIMAL(10, 2) CHECK (Precio_unidad > 0)
);

INSERT INTO Producto (Id_producto, Nombre_producto, Categoria, Cantidad_producto, Precio_unidad)
VALUES ('584', 'Teléfono Samsung Galaxy','Teléfono', 30, 985),
('685','Computadora Dell Inspiron','Computadora',25,2564),
('357', 'Accesorio Anker Power Bank','Accesorio', 90, 600);

SELECT * FROM Producto;


CREATE TABLE Ventas (
    Id_ventas INT PRIMARY KEY, 
    Id_cliente VARCHAR(11) NOT NULL,
    Nombre VARCHAR(50) NOT NULL, 
    Direccion VARCHAR(50), 
    Telefono VARCHAR(40), 
    Id_producto VARCHAR(20) NOT NULL,
    Fecha DATE, 
    Cantidad INT,
    Precio DECIMAL(10, 2) CHECK (Precio > 0),
    CONSTRAINT FK_clientes FOREIGN KEY (Id_cliente) REFERENCES Cliente (Id_cliente),
    CONSTRAINT FK_producto FOREIGN KEY(Id_producto) REFERENCES Producto (Id_producto)
);

INSERT INTO Ventas (Id_ventas, Id_cliente, Nombre, Direccion, Telefono, Id_producto, Fecha, Cantidad, Precio)
VALUES (1, '001', 'Daniel', 'Calle1', '0997856435', '584', '2024-12-03', 2, 1970),
(2,'002','Maria','Calle2','0991535307','357','2024-03-30',3,1800);

SELECT * FROM Ventas;

SEMANA 2

restricioneslistae email
los dominios son los valores permitidos
esquema  es la (intencion)
el estado the relation es un subconjunto de el plano cartesiano producto de los dominios de los atributos( extension)
las fila no son ordenadas
pero una fila es un conjunto de atributos valores ordenados columna.
valores en la tupla considerados indivisibles.
las constraints o restricciones son los valores permitidos en la base de datos.
claves primarias (no admite nulas y no se repite) hsumarle discriminantes(claves compuestas).
claves foreaneas pueden tener null y valores repetidos.
cual es la cantidad de discriminates es lael numero de atributos que tenga la tabla
cuantos productos se vendi
SELECT OrderDetails.*, Products.ProductName 
FROM OrderDetails LEFT JOIN Products
 ON OrderDetails.ProductID = Products.ProductID
WHERE OrderID=10248;

SELECT OrderDetails.OrderID, COUNT(OrderDetails.ProductId), SUM(Products.Price*OrderDetails.Quantity) AS Subtotal
FROM OrderDetails LEFT JOIN Products ON OrderDetails.ProductID = Products.ProductID,
AND LEFT JOIN Customers ON
GROUP BY OrderDetails.OrderID;

SELECT OrderDetails.OrderID, COUNT(OrderDetails.ProductId), SUM(Products.Price*OrderDetails.Quantity) AS Subtotal
FROM OrderDetails LEFT JOIN Products 
	ON OrderDetails.ProductID = Products.ProductID
GROUP BY OrderDetails.OrderID;

SELECT COUNT(*) AS "Cantidad de productos",
  MIN(Price) AS "Precio Minimo",
    MAX(Price) AS "Precio Maximo",
      AVG(Price) AS "Precio Promedio"
FROM Products
WHERE Products.SupplierID in(1,2,3)
GROUP BY Products.CategoryID;

SELECT Products.CategoryID,
  COUNT(*) AS "Cantidad de productos",
  MIN(Price) AS "Precio Minimo",
  MAX(Price) AS "Precio Maximo",
  AVG(Price) AS "Precio Promedio"
FROM Products
GROUP BY Products.CategoryID;

SELECT COUNT(Price)
FROM Products;

SELECT MIN(Price)
FROM Products;

SELECT MAX(Price)
FROM Products;

SELECT AVG(Price)
FROM Products;

SELECT *
FROM Products
WHERE  Products.ProductName NOT LIKE 'C%';

SELECT *
FROM Suppliers
WHERE Suppliers.ContactName IS NULL;

SELECT *
FROM Suppliers
WHERE Suppliers.ContactName IS NOT NULL;


