SEMANA 1
esquema intencion
relación, tabla, clase de entidades
estas relaciones están formadas por conjunto de propiedades también llamada atributos columnas, campos (orden no importa)
en el modelo relacional sele puede llamar tuplas filas, registros entidades
clave primaria ,PK, clave principal se asegura que cada fila es unica(solo una y pueden ser simple o compuesta) NO PUEDESER NULO 
clave foránea, FK, foreign key, establece una relación entre la tablas(puede existir muchas en una misma tabla)si puede set nulo o pertener a un padre
el dominio define los valores permitidos para cada atributo(puede  tener restricciones

CREATE TABLE Cliente (
    Id_cliente VARCHAR(11) PRIMARY KEY, 
    Nombre_cliente VARCHAR(50) NOT NULL, 
    Direccion_cliente VARCHAR(50), 
    Telefono_cliente VARCHAR(40)
);

INSERT INTO Cliente (Id_cliente, Nombre_cliente, Direccion_cliente, Telefono_cliente)
VALUES ('001', 'Daniel', 'Calle1', '0997856435'),
('002', 'Maria', 'Calle2', '0991535307'),
('003', 'Fernanda', 'Calle3', '0995684935'),
('004', 'Juan', 'Calle4', '0998143658'),
('005', 'Josselyn', 'Calle5', '0993857496');
SELECT * FROM Cliente;

CREATE TABLE Producto (
Id_producto VARCHAR(11) PRIMARY KEY,
Nombre_producto VARCHAR(50) NOT NULL,
Categoria VARCHAR(50) NOT NULL,
Cantidad_producto INT,
Precio_unidad DECIMAL(10, 2) CHECK (Precio_unidad > 0)
);

INSERT INTO Producto (Id_producto, Nombre_producto, Categoria, Cantidad_producto, Precio_unidad)
VALUES ('584', 'Teléfono Samsung Galaxy','Teléfono', 30, 985),
('685','Computadora Dell Inspiron','Computadora',25,2564),
('357', 'Accesorio Anker Power Bank','Accesorio', 90, 600);

SELECT * FROM Producto;


CREATE TABLE Ventas (
    Id_ventas INT PRIMARY KEY, 
    Id_cliente VARCHAR(11) NOT NULL,
    Nombre VARCHAR(50) NOT NULL, 
    Direccion VARCHAR(50), 
    Telefono VARCHAR(40), 
    Id_producto VARCHAR(20) NOT NULL,
    Fecha DATE, 
    Cantidad INT,
    Precio DECIMAL(10, 2) CHECK (Precio > 0),
    CONSTRAINT FK_clientes FOREIGN KEY (Id_cliente) REFERENCES Cliente (Id_cliente),
    CONSTRAINT FK_producto FOREIGN KEY(Id_producto) REFERENCES Producto (Id_producto)
);

INSERT INTO Ventas (Id_ventas, Id_cliente, Nombre, Direccion, Telefono, Id_producto, Fecha, Cantidad, Precio)
VALUES (1, '001', 'Daniel', 'Calle1', '0997856435', '584', '2024-12-03', 2, 1970),
(2,'002','Maria','Calle2','0991535307','357','2024-03-30',3,1800);

SELECT * FROM Ventas;

SEMANA 2

restricioneslistae email
los dominios son los valores permitidos
esquema  es la (intencion)
el estado the relation es un subconjunto de el plano cartesiano producto de los dominios de los atributos( extension)
las fila no son ordenadas
pero una fila es un conjunto de atributos valores ordenados columna.
valores en la tupla considerados indivisibles.
las constraints o restricciones son los valores permitidos en la base de datos.
claves primarias (no admite nulas y no se repite) hsumarle discriminantes(claves compuestas).
claves foreaneas pueden tener null y valores repetidos.
cual es la cantidad de discriminates es lael numero de atributos que tenga la tabla
cuantos productos se vendi
SELECT OrderDetails.*, Products.ProductName 
FROM OrderDetails LEFT JOIN Products
 ON OrderDetails.ProductID = Products.ProductID
WHERE OrderID=10248;

SELECT OrderDetails.OrderID, COUNT(OrderDetails.ProductId), SUM(Products.Price*OrderDetails.Quantity) AS Subtotal
FROM OrderDetails LEFT JOIN Products ON OrderDetails.ProductID = Products.ProductID,
AND LEFT JOIN Customers ON
GROUP BY OrderDetails.OrderID;

SELECT OrderDetails.OrderID, COUNT(OrderDetails.ProductId), SUM(Products.Price*OrderDetails.Quantity) AS Subtotal
FROM OrderDetails LEFT JOIN Products 
	ON OrderDetails.ProductID = Products.ProductID
GROUP BY OrderDetails.OrderID;

SELECT COUNT(*) AS "Cantidad de productos",
  MIN(Price) AS "Precio Minimo",
    MAX(Price) AS "Precio Maximo",
      AVG(Price) AS "Precio Promedio"
FROM Products
WHERE Products.SupplierID in(1,2,3)
GROUP BY Products.CategoryID;

SELECT Products.CategoryID,
  COUNT(*) AS "Cantidad de productos",
  MIN(Price) AS "Precio Minimo",
  MAX(Price) AS "Precio Maximo",
  AVG(Price) AS "Precio Promedio"
FROM Products
GROUP BY Products.CategoryID;

SELECT COUNT(Price)
FROM Products;

SELECT MIN(Price)
FROM Products;

SELECT MAX(Price)
FROM Products;

SELECT AVG(Price)
FROM Products;

SELECT *
FROM Products
WHERE  Products.ProductName NOT LIKE 'C%';

SELECT *
FROM Suppliers
WHERE Suppliers.ContactName IS NULL;

SELECT *
FROM Suppliers
WHERE Suppliers.ContactName IS NOT NULL;

TAREA

CREATE TABLE Student(
SNN INT PRIMARY KEY,
Name VARCHAR(50),
Major VARCHAR(100),
Bdate DATE
);
CREATE TABLE Course(
Course_C INT PRIMARY KEY,
Cname VARCHAR(50),
Dept VARCHAR(100)
);
CREATE TABLE Text_C(
Book_ISBN VARCHAR(100) PRIMARY KEY,
Book_Title VARCHAR(100),
Publisher VARCHAR(100),
Author VARCHAR(100)
);
CREATE TABLE Book_Adoption(
Course_C INT,
Quarter_C VARCHAR(50),
Book_ISBN VARCHAR(100),
PRIMARY KEY(Course_C, Quarter_C),
CONSTRAINT FK_Book FOREIGN KEY (Book_ISBN) REFERENCES Text_C(Book_ISBN)
);
CREATE TABLE Enroll(
SNN INT,
Course_C INT,
Quarter_C VARCHAR(50),
Grade CHAR(1),
PRIMARY KEY(SNN, Course_C, Quarter_C),
CONSTRAINT FK_SNN FOREIGN KEY (SNN) REFERENCES Student(SNN),
CONSTRAINT FK_Course FOREIGN KEY (Course_C) REFERENCES Course(Course_C),
CONSTRAINT FK_Quarter FOREIGN KEY (Course_C ,Quarter_C) REFERENCES Book_Adoption(Course_C ,Quarter_C)
);
INSERT INTO Student(SNN, Name, Major, Bdate)
VALUES(101,'Emily','Diseño Gráfico','2000-06-03'),
(102,'Daniel','Medicina','2005-09-15'),
(103,'Fatima','Enfermeria','1999-02-24');

INSERT INTO Course(Course_C, Cname, Dept)
VALUES(201,'Phothoshop','Departamento de Artes y Diseño'),
(202,'Anatomía Humana','Departamento de Medicina '),
(203,'Anatomía Humana','Departamento de Ciencias de la Salud');

INSERT INTO Text_C(Book_ISBN, Book_Title, Publisher, Author)
VALUES('978-3-16-148410-0','Fundamentos de Diseño Gráfico','Editorial Creativa', 'Ana Martínez'),
('978-0-13-419044-0','Introducción a la Medicina','Medicina y Salud', 'Dr. Carlos Ruiz'),
('978-1-59327-889-7','Enfermería: Teoría y Práctica','Salud Global', 'Laura Gómez');

INSERT INTO Book_Adoption(Course_C, Quarter_C, Book_ISBN)
VALUES(201,'2024-2025','978-3-16-148410-0'),
(202,'2024-2025','978-0-13-419044-0'),
(203,'2024-2025','978-1-59327-889-7');

INSERT INTO Enroll(SNN, Course_C, Quarter_C, Grade)
VALUES(101, 201,'2024-2025','A'),
(102, 202,'2024-2025','B'),
(103, 203,'2024-2025','C');



SEMANA 3
SELECT *
FROM Order o INNER JOIN Customers c
o.CustomerID + c.CustomerID;

SELECT o.*, c.CustomerNmae, c.Counrr . c.CITY,c.Adress
FROM Order o INNER JOIN Customers c
o.CustomerID + c.CustomerID;

SELECT p.*, s.SupplierName, s.ContactName, s.Phone
FROM Products p INNER JOIN Suppliers s 
     ON p.SupplierID=s.SupplierID;

SELECT p.*, s.SupplierName, s.ContactName, s.Phone,c.CategoryName
FROM ((Products p 
   INNER JOIN Suppliers s ON p.SupplierID=s.SupplierID)
   INNER JOIN Categories c ON p.CategoryID=c.CategoryID)
ORDER By c.CategoryName, p.ProductName;

SELECT *
FROM Customers c LEFT JOIN Orders o
ON c.CustomerID = o.CustomerID;

SELECT *
FROM Customers c LEFT JOIN Orders o
ON c.CustomerID = o.CustomerID
ORDER BY o.OrderID;

ELECT e.*, o.OrderID
FROM Employees e LEFT JOIN Orders o
ON e.EmployeeID = o.EmployeeID
ORDER BY o.OrderID;

SELECT DISTINCT e.EmployeeID, e.LastName, e.FirstName, o.OrderID  
FROM Employees e RIGHT JOIN Orders o
ON e.EmployeeID = o.EmployeeID
ORDER BY e.LastName,e.FirstName;

SELECT DISTINCT e.EmployeeID, e.LastName, e.FirstName, o.OrderID  
FROM Employees e LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID
ORDER BY e.LastName,e.FirstName
UNION
SELECT DISTINCT e.EmployeeID, e.LastName, e.FirstName, o.OrderID  
FROM Employees e RIGHT JOIN Orders o ON e.EmployeeID = o.EmployeeID
ORDER BY e.LastName,e.FirstName;
CUAL ES EL PRODUCTO QUE COMPRO UN PRODUCTO CON EL PRECIO MAS ALTO
SELECT c.*
FROM Customers c
WHERE CustomersID NOT IN (SELECT DISTINCT

SELECT * 
FROM Products p
WHERE Price = (SELECT MAX(Price)FROM Products);

cual es laorden de la orden que vendio la mayorcantidad de productos individuales


SELECT * 
FROM  OrderDetails
WHERE Quantity = (SELECT MAX(	Quantity)FROM OrderDetails);




1.1.3 Consultas sobre una tabla

  a  Todos
SELECT p.nombre AS "Producto", 
	p.precio AS "EUR",
	p.precio/0.95 AS "USD",	
	ROUND(p.precio/0.95, 2) AS "USD redondeado ",
	TRUNCATE(p.precio/0.95, 2) AS "USD truncado ",
	TRUNCATE(p.precio/0.95, 0) AS "USD truncado "	FROM producto p 
ORDER BY 2 ;

Nelson Piedra | @nopiedra  a  Todos 7:57
#Lista el nombre de todos los productos que hay en la tabla producto.
SELECT *
FROM producto ;

#Lista los nombres y los precios de todos los productos de la tabla producto.

SELECT p.nombre, p.precio
FROM producto p 
ORDER BY 2 ;
#ORDER BY p.nombre ;
#Lista todas las columnas de la tabla producto.
DESC producto ;
DESCRIBE producto ;

#Lista el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD).

SELECT p.nombre AS "Producto", 
	p.precio AS "EUR",
	p.precio/0.95 AS "USD",	
	ROUND(p.precio/0.95, 2) AS "USD redondeado ",
	TRUNCATE(p.precio/0.95, 2) AS "USD truncado ,2",
	TRUNCATE(p.precio/0.95, 0) AS "USD truncado ,0"	FROM producto p 
ORDER BY 2 

1. Lista el nombre de todos los productos que hay en la tabla producto.

2. Lista los nombres y los precios de todos los productos de la tabla producto.
#Lista el nombre de todos los productos que hay en la tabla producto.
SELECT *
FROM producto ;

#Lista los nombres y los precios de todos los productos de la tabla producto.

SELECT p.nombre, p.precio
FROM producto p 
ORDER BY 2 ;
#ORDER BY p.nombre ;

3.Lista todas las columnas de la tabla producto.

4. Lista el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD).

/*5.Lista el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD). Utiliza los siguientes alias para las columnas: nombre de producto, euros, dólares.*/

SELECT p.nombre AS "Producto", 
	p.precio AS "euros",
	p.precio/0.95 AS "dólares"
FROM producto p 
ORDER BY 2 ;

/*6 Lista los nombres y los precios de todos los productos de la tabla producto, convirtiendo los nombres a mayúscula.*/

SELECT UPPER(p.nombre) AS "Producto", 
	p.precio AS "euros",
	p.precio/0.95 AS "dólares"
FROM producto p 
ORDER BY 2 ;

7. Lista los nombres y los precios de todos los productos de la tabla producto, convirtiendo los nombres a minúscula.

SELECT LOWER(p.nombre) AS "Producto", 
	p.precio AS "euros",
	p.precio/0.95 AS "dólares"
FROM producto p 
ORDER BY 2 ;

/*8.Lista el nombre de todos los fabricantes en una columna, y en otra columna obtenga en mayúsculas los dos primeros caracteres del nombre del fabricante.*/
SELECT f.nombre, 
UPPER (substring (f.nombre,1,2)) AS "Siglos"
FROM fabricante f
ORDER BY 1;

/*9.Lista los nombres y los precios de todos los productos de la tabla producto, redondeando el valor del precio.*/

SELECT p.nombre AS "Producto", 	
	TRUNCATE(p.precio, 0) AS "Precio"
FROM producto p 
ORDER BY 2 ;


/*10.Lista los nombres y los precios de todos los productos de la tabla producto, truncando el valor del precio para mostrarlo sin ninguna cifra decimal.*/

DESC producto;
SELECT DISTINCT id_fabricante
FROM producto
ORDER BY 1;

/*11.Lista el identificador de los fabricantes que tienen productos en la tabla producto.*/

SELECT DISTINCT id_fabricante
FROM producto
ORDER BY 1;


/*12.Lista el identificador de los fabricantes que tienen productos en la tabla producto, eliminando los identificadores que aparecen repetidos.*/

SELECT nombre
FROM fabricante
ORDER BY noombre DESC;

/*13.Lista los nombres de los fabricantes ordenados de forma ascendente.*/

SELECT nombre, precio
FROM producto
ORDER BY 1,2 ASC;


/*14.Lista los nombres de los fabricantes ordenados de forma descendente.*/


SELECT nombre, precio
FROM producto
ORDER BY 1,2 DESC;

/* 15.Lista los nombres de los productos ordenados en primer lugar por el nombre de forma ascendente y en segundo lugar por el precio de forma descendente.*/

SELECT nombre, precio
FROM producto
ORDER BY 1,2 DESC;

/* 16.Devuelve una lista con las 5 primeras filas de la tabla fabricante.*/

SELECT *
FROM Fabricante
LIMIT 5;

/* 17.Devuelve una lista con 2 filas a partir de la cuarta fila de la tabla fabricante. La cuarta fila también se debe incluir en la respuesta.*/

SELECT * 
FROM fabricante
ORDER BY id
LIMIT 2 OFFSET 3 ;
  a  Todos
#Devuelve una lista con 2 filas a partir de la cuarta fila de la tabla fabricante. La cuarta fila también se debe incluir en la respuesta.
SELECT *
FROM Fabricante 
ORDER BY id 
LIMIT 3, 2 ;
#LIMIT 3, 3;
#Posgres OFFSET 3 LIMIT 2 ;
#Lista el nombre y el precio del producto más barato. (Utilice solamente las cláusulas ORDER BY y LIMIT)

SELECT nombre, precio
FROM producto
ORDER BY 2
LIMIT 1;

SELECT MIN(precio)
FROM producto ;

# SELECT nombre, MIN(precio) FROM producto ;
#Lista el nombre y el precio del producto más caro. (Utilice solamente las cláusulas ORDER BY y LIMIT)
SELECT nombre, precio
FROM producto
ORDER BY 2 DESC
LIMIT 1;

SELECT MAX(precio) FROM producto ;

/* 18.Lista el nombre y el precio del producto más barato. (Utilice solamente las cláusulas ORDER BY y LIMIT)*/

/* 19.Lista el nombre y el precio del producto más caro. (Utilice solamente las cláusulas ORDER BY y LIMIT)*/

/* 20.Lista el nombre de todos los productos del fabricante cuyo identificador de fabricante es igual a 2.*/


/* 21.Lista el nombre de los productos que tienen un precio menor o igual a 120€.*/
SELECT *
FROM producto
WHERE precio <=120

/* 22.Lista el nombre de los productos que tienen un precio mayor o igual a 400€.*/
SELECT *
FROM producto
WHERE precio >=400

/* 23.Lista el nombre de los productos que no tienen un precio mayor o igual a 400€.*/

SELECT *
FROM producto
WHERE precio <400

/* 24.Lista todos los productos que tengan un precio entre 80€ y 300€. Sin utilizar el operador BETWEEN.*/

/* 25.Lista todos los productos que tengan un precio entre 60€ y 200€. Utilizando el operador BETWEEN.*/

/* 26.Lista todos los productos que tengan un precio mayor que 200€ y que el identificador de fabricante sea igual a 6.*/

/* 27.Lista todos los productos donde el identificador de fabricante sea 1, 3 o 5. Sin utilizar el operador IN.*/

/* 28.Lista todos los productos donde el identificador de fabricante sea 1, 3 o 5. Utilizando el operador IN.*/

/* 29.Lista el nombre y el precio de los productos en céntimos (Habrá que multiplicar por 100 el valor del precio). Cree un alias para la columna que contiene el precio que se llame céntimos.*/

/* 30.Lista los nombres de los fabricantes cuyo nombre empiece por la letra S.*/

/* 31.Lista los nombres de los fabricantes cuyo nombre termine por la vocal e.*/

/* 32.Lista los nombres de los fabricantes cuyo nombre contenga el carácter w.*/

/* 33.Lista los nombres de los fabricantes cuyo nombre sea de 4 caracteres.*/

/* 34.Devuelve una lista con el nombre de todos los productos que contienen la cadena Portátil en el nombre.*/

/* 35.Devuelve una lista con el nombre de todos los productos que contienen la cadena Monitor en el nombre y tienen un precio inferior a 215 €.*/

/* 36.Lista el nombre y el precio de todos los productos que tengan un precio mayor o igual a 180€. Ordene el resultado en primer lugar por el precio (en orden descendente) y en segundo lugar por el nombre (en orden ascendente).*/

SELECT o.OrderID, COUNT (*) AS Productos, SUM(od.Quantity*p.Price) AS subtotal
FROM ((Orders o 
INNER JOIN OrderDetails od ON o.OrderID = od.OrderID)
INNER JOIN Products p ON od.ProductID = p.ProductID)
GROUP BY o.OrderID
ORDER BY 3 DESC
;
SELECT c.CustomerID, c.CustomerName, o.OrderID, SUM(od.Quantity * p.Price) AS Subtotal
FROM ((Orders o 
	INNER JOIN OrderDetails od ON o.OrderId = od.OrderId)
	INNER JOIN Products p ON od.ProductID = p.ProductID)
    INNER JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.CustomerID, c.CustomerName, o.OrderID
ORDER BY 4 DESC ;

SELECT Year(o.OrderDate), Month(o.orderDate), SUM(od.quantity) AS Subtotal
FROM Orders o INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY Year(o.OrderDate), Month(o.orderDate)
;
Las ventas por meces
Los meses con mayores/menores ventas
Los Meses con Ventas mayores/menores que el promedio
SELECT YEAR(o.OrderDate) AS Año, 
       MONTH(o.OrderDate) AS Mes, 
       MAX(od.Quantity) AS Subtotal
FROM Orders o
INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY Year(o.OrderDate), Month(o.OrderDate);
